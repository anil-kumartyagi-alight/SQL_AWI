WITH 
mv_person AS
    (
    SELECT
    DISTINCT global_client_id
                                ,global_person_id
                                ,client_id, client_id_string
                                ,platform_person_internal_id
                                ,gender
                                ,standard_gender AS SEX_CD
                                ,CASE
WHEN birth_date IN (
'1800-01-01'
,'1900-01-01'
,'1901-01-01'
,'1910-01-01'
,'1930-01-01'
,'0001-12-30 BC'
) THEN NULL
ELSE birth_date end as birth_date
                                ,person_reason_code
                                ,union_name
                                , platform_id
                                ,begin_date
                                ,end_date
        ,PRSN_DIMN7.last_name AS LAST_NM
        ,PRSN_DIMN7.first_name AS FRST_NM
        ,PRSN_DIMN7.middle_name AS MID_NM
       ,PRSN_DIMN7.is_bad_preferred_address  as BAD_ADDR_IND_CD
       ,row_level_security_filter_value
 
                FROM person_rpt.person PRSN_DIMN7
                WHERE
 person_reason_code in( 'Employee','QDRO','Beneficiary' )AND
                                begin_date <= <<$pAsOfDate>>
                                AND end_date >= <<$pAsOfDate>>
                                 AND client_id = cast(<<$pClientId>> as  int)
    )
--select * from mv_person
,
 
mv_person_employment
AS (
                SELECT DISTINCT global_client_id
                                ,global_person_id
                                ,client_id
                                ,platform_person_internal_id
								,platform_id
                                ,expected_annual_base_salary
                                ,hourly_salary_status
                                ,fulltime_parttime_status
                                ,employment_status
                                ,hire_date
                                , CASE WHEN termination_date IN ('1800-01-01','1900-01-01','0001-12-30 BC') THEN NULL ELSE termination_date end as termination_date
                                ,begin_date as effective_begin_date
                                ,employee_id
                                ,standard_value as employment_status_roll_up_1
                FROM person_rpt.person_employment
                left join (select distinct standard_key,standard_value from adlfound_itg.standard_rollups_lookup where
standard_group_key in ('EMPL-STAT-CD-ROLLUP1') ) s
on trim(standard_employment_status_code)=(standard_key)
                WHERE
                --upper(trim(employment_status)) in  ('ACTIVE','INACTIVE')AND
                begin_date <= <<$pAsOfDate>>
                                AND end_date >= <<$pAsOfDate>>
                                AND client_id = cast(<<$pClientId>> as  int)
                )
,
pcf
AS (
                select * from person_itg.person_custom_filter
                where client_id =cast(<<$pClientId>> as  int)
                and data_product = 'DB'
                and begin_date <= <<$pAsOfDate>>
                     AND end_date >= <<$pAsOfDate>>
                           
                )          
               
                ,person
AS (
                SELECT p.global_client_id
                                ,p.global_person_id
                                ,p.client_id, p.client_id_string
                                ,p.platform_person_internal_id
								,p.platform_id
                                ,e.expected_annual_base_salary as salary
                                ,e.hourly_salary_status
                                ,e.fulltime_parttime_status
                                ,e.employment_status
                                ,p.person_reason_code
                                ,p.union_name
                                ,p.gender
                                ,p.FRST_NM
                                ,p.MID_NM
                                ,p.LAST_NM
                                ,p.birth_date
                                ,e.employment_status_roll_up_1
                                ,case WHEN p.person_reason_code = 'Employee'
                                  AND upper(e.employment_status_roll_up_1) <> 'ACTIVE'
                                  AND e.termination_date IS NOT NULL
                                  AND EXTRACT(YEAR FROM e.termination_date) <> 2299
                                   THEN e.termination_date else NULL END AS termination_date
                                ,e.hire_date
                                ,e.effective_begin_date
                                ,e.employee_id
                                ,CASE
                                                WHEN p.birth_date IN (
                                                                                '1800-01-01'
                                                                                ,'1900-01-01'
                                                                                ,'1901-01-01'
                                                                                ,'1910-01-01'
                                                                                ,'1930-01-01'
                                                                                )
                                                                THEN NULL
                                                ELSE ROUND(DATEDIFF(DAY, p.birth_date, last_day(<<$pAsOfDate>>)) / 365.25, 2)
                                                END AS age
                                ,CASE
                                                WHEN p.person_reason_code = 'Employee'
                                                                AND upper(e.employment_status_roll_up_1) = 'ACTIVE'
                                                                THEN ROUND(DATEDIFF(DAY, e.hire_date, last_day(<<$pAsOfDate>>)) / 365.25, 2)
                                                WHEN p.person_reason_code = 'Employee'
                                                                AND upper(e.employment_status_roll_up_1) <> 'ACTIVE'
                                                                AND e.termination_date IS NOT NULL
                                                                AND EXTRACT(YEAR FROM e.termination_date) <> 2299
                                                                THEN ROUND(DATEDIFF(DAY, e.hire_date, e.termination_date) / 365.25, 2)
                                                ELSE NULL
                                                END AS tenure,
                                 p.row_level_security_filter_value,
    pcf.custom_filter_1, pcf.custom_filter_2, pcf.custom_filter_3, pcf.custom_filter_4, pcf.custom_filter_5,BAD_ADDR_IND_CD
                FROM mv_person p
                left  JOIN mv_person_employment e ON p.client_id = e.client_id
                                AND p.platform_person_internal_id = e.platform_person_internal_id
								AND p.platform_id = e.platform_id
--                                AND p.global_client_id = e.global_client_id
--                                AND p.global_person_id = e.global_person_id
                                 AND p.client_id = cast(<<$pClientId>> as  int)
               
                left join pcf on p.platform_id = pcf.platform_id
                                and p.platform_person_internal_id = pcf.platform_person_internal_id
                                and p.client_id = pcf.client_id
--                              and p.begin_date <= pcf.end_date
--                              and p.end_date >= pcf.begin_date
               
               
                )
--select * from person
,
range_lookup
AS (
                SELECT standard_group_key
                                ,standard_display_name standard_display_value
                                ,standard_min
                                ,standard_max
                                ,OWNER
                FROM adlfound_itg.standard_ranges_lookup
                )
,
db_person_attributes
AS (
SELECT
a.client_id
,a.platform_id
,a.client_id_string
,a.platform_person_internal_id
,a.salary
,D.standard_display_value AS SALARY_RANGE
,a.hourly_salary_status
,a.fulltime_parttime_status
,a.employment_status
,a.person_reason_code
,a.union_name
,a.gender
,a.age
,B.standard_display_value AS AGE_RANGE
,a.tenure
,C.standard_display_value AS TENURE_RANGE
,a.row_level_security_filter_value
,a.custom_filter_1
,a.custom_filter_2
,a.custom_filter_3
,a.custom_filter_4
,a.custom_filter_5
,a.BAD_ADDR_IND_CD
,a.FRST_NM
,a.MID_NM
,a.LAST_NM
,a.birth_date
,a.termination_date
,a.hire_date
,a.effective_begin_date
,a.employee_id
                FROM person a
                LEFT JOIN (
                                SELECT *
                                FROM range_lookup
                                WHERE standard_group_key = 'AGE_RANGE_DB'
                                ) b ON floor(a.age) between b.standard_min AND b.standard_max
                LEFT JOIN (
                                SELECT *
                                FROM range_lookup
                                WHERE standard_group_key = 'TENURE'
                                ) C ON floor(a.tenure) between C.standard_min AND C.standard_max
                LEFT JOIN (
                                SELECT *
                                FROM range_lookup
                                WHERE standard_group_key = 'SALARY_RANGE_WEALTH'
                                ) D ON floor(a.salary) between D.standard_min AND D.standard_max
                )
--select * from db_person_attributes
, 
db_plan_dim as (
select distinct client_id,plan_id,plan_ldsc_tx
from wealth_rpt.db_plan_dim 
where client_id=cast(<<$pClientId>>  as int)
)
--select * from db_plan_dim
,
db_election_dim as 
( select distinct client_id,db_election_id,db_election_long from 
wealth_itg.db_election_dim where client_id=cast(<<$pClientId>>  as int)
)
,
address_dim as (select distinct client_id,address_id,address_long_description from 
 wealth_rpt.address_dim where client_id=cast(<<$pClientId>>  as int)
 )

,
Pension_Payments_SQL AS 
    (
    SELECT  distinct
	payment_detail.platform_id,
        payment_detail.platform_person_internal_id AS Person_Internal_ID, 
        --payment_detail.plan AS Pension_Plan, 
        payment_detail.plan_id AS plan_id, 
        payment_dimension.db_pmt_type_tx AS Payment_Type_Description, 
        payment_dimension.pmt_ldsc_tx AS Payment_Description, 
        payment_detail.payment_id AS PMT_ID, 
        payment_detail.payment_instruction_status_code AS Payment_Status, 
	--	payment_detail.db_election_id
        elec.db_election_long AS Election_Description, 
        payment_detail.payment_adjustment_code AS Indicator, 
        payment_detail.service_period_end_date AS Service_Period_End_Date, 
        payment_detail.optional_form_group AS Optional_Form, 
        payment_detail.optional_form AS Optional_Form_Description, 
        payment_detail.payment_element AS Payment_Element, 
        payment_detail.benefit_commencement_date AS Benefit_Commencement_Date, 
        payment_detail.begin_date AS First_Payment_Date, 
        payment_detail.end_date AS Payment_End_Date, 
        payment_detail.change_date AS Change_Date, 
        payment_detail.optional_form_end_date AS End_Date, 
        payment_detail.after_tax_change_date AS After_Tax_Change_Date, 
        payment_detail.payment_instruction_status_code AS Payment_Status_Code, 
        payment_detail.after_tax_end_date AS After_Tax_End_Date, 
        payment_detail.after_tax_change_amount AS After_Tax_Change_Amount, 
        payment_detail.rollover_available_amount AS Rollover_Available_Amount, 
        payment_detail.start_amount AS Start_Amount, 
        payment_detail.continued_start_amount AS Continued_Start_Amount, 
        payment_detail.change_amount AS Change_Amount, 
        payment_detail.continued_change_amount AS Continued_Change_Amount, 
        payment_detail.pop_up_amount AS Pop_Up_Amount, 
        payment_detail.pop_up_change_amount AS Pop_Up_Change_Amount, 
        payment_detail.element_other_amount AS Other_Amount, 
        payment_detail.after_tax_amount AS After_Tax_Amount, 
        payment_detail.db_election_id AS Elec_id,
		case when trim(upper(payment_detail.payment_instruction_status_code))='A' then 'Active'
		when trim(upper(payment_detail.payment_instruction_status_code))='C' then 'Complete'
		when trim(upper(payment_detail.payment_instruction_status_code))='P' then 'Pending'
		when trim(upper(payment_detail.payment_instruction_status_code))='S' then 'Suspended'
		when trim(upper(payment_detail.payment_instruction_status_code))='X' then 'Canceled'
		else NULL end as Payment_Status_Description
		--,payment_detail.payment_destination AS payment_destination
		,payment_detail.delivery_type as Delivery_Type_Description
		,address.address_long_description as Delivery_Address
    FROM
        wealth_rpt.db_payment_instructions payment_detail
inner join
wealth_rpt.db_pmt_dim payment_dimension
on 
        payment_dimension.pmt_id=payment_detail.payment_id
		and 
		payment_dimension.client_id=payment_detail.client_id
left join db_election_dim elec 
on elec.db_election_id=payment_detail.db_election_id
and elec.client_id=payment_detail.client_id

left join address_dim address
on address.address_id=payment_detail.delivery_address_id
and address.client_id=payment_detail.client_id

    WHERE 
        <<$pAsOfDate>> between payment_detail.begin_date AND  payment_detail.end_date
		and payment_detail.client_id= cast(<<$pClientId>>  as int)
		--and payment_detail.payment_destination <> 'NA'
    )
	-- select * from Pension_Payments_SQL
,main as (
SELECT
    Person.client_id as Client_Id,
	Person.client_id_string,
	Person.platform_person_internal_id AS platform_person_internal_id,
	Person.platform_id,
    Person.LAST_NM AS Last_Name, 
	Person.MID_NM as Middle_name,
    Person.FRST_NM AS First_Name, 
	db_plan_dim.plan_ldsc_tx as plan_name,
    --Pension_Payments_SQL.Pension_Plan AS Pension_Plan, 
    Pension_Payments_SQL.Payment_Type_Description AS Payment_Type_Description, 
    Pension_Payments_SQL.Payment_Description AS Payment_Description, 
    Pension_Payments_SQL.Indicator AS Adjustment_Retro_Interest_Indicator, 
    Pension_Payments_SQL.Service_Period_End_Date AS Service_Period_End_Date, 
    Pension_Payments_SQL.Benefit_Commencement_Date AS Benefit_Commencement_Date, 
    Pension_Payments_SQL.First_Payment_Date AS Payment_Begin_Date, 
    Pension_Payments_SQL.Payment_Status_Description AS Payment_Status_Description, 
    Person.person_reason_code AS Person_Type, 
    Pension_Payments_SQL.Payment_End_Date AS Payment_End_Date, 
	Pension_Payments_SQL.Election_Description,
	Optional_Form as Optional_Form_Group_Description,
	Optional_Form_Description as Optional_Form_Description,
	Payment_Element,
	Delivery_Address,
	Delivery_Type_Description,
	
SUM(
        CASE 
            WHEN Pension_Payments_SQL.Start_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Start_Amount
        END) AS Start_Amount,
SUM(
        CASE 
            WHEN Pension_Payments_SQL.Continued_Start_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Continued_Start_Amount
        END) AS Continued_Start_Amount,
Change_Date,
SUM(Pension_Payments_SQL.Change_Amount) AS Change_Amount,
SUM(Pension_Payments_SQL.Continued_Change_Amount) AS Continued_Change_Amount,
 SUM(
        CASE 
            WHEN Pension_Payments_SQL.Pop_Up_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Pop_Up_Amount
        END) AS Pop_Up_Amount,
SUM(
        CASE 
            WHEN Pension_Payments_SQL.Pop_Up_Change_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Pop_Up_Change_Amount
        END) AS Pop_Up_Change_Amount,
 SUM(
        CASE 
            WHEN Pension_Payments_SQL.Other_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Other_Amount
        END) as Element_Other_Amount,
End_Date as Optional_Form_End_Date,
SUM (CASE 
            WHEN Pension_Payments_SQL.After_Tax_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.After_Tax_Amount
        END) AS After_Tax_Amount,
SUM(
        CASE 
            WHEN Pension_Payments_SQL.After_Tax_Change_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.After_Tax_Change_Amount
        END) AS After_Tax_Change_Amount,
After_Tax_Change_Date,

After_Tax_End_Date,
SUM(
        CASE 
            WHEN Pension_Payments_SQL.Rollover_Available_Amount IS NULL THEN 0.00
            ELSE Pension_Payments_SQL.Rollover_Available_Amount
        END) AS Rollover_Available_Amount,
--payment_destination,

 --   DB_PRSN_DBPMTDLVR0.ADDR_LDSC_TX AS Delivery_Address, 
 --   Delivery_Type_Description.LDSC_TX AS Delivery_Type_Description,
Person.salary,
Person.SALARY_RANGE,
Person.hourly_salary_status,
Person.fulltime_parttime_status
,Person.employment_status
,Person.union_name
,Person.gender
,Person.age
,Person.AGE_RANGE
,Person.tenure
,Person.TENURE_RANGE
,Person.row_level_security_filter_value
,Person.custom_filter_1
,Person.custom_filter_2
,Person.custom_filter_3
,Person.custom_filter_4
,Person.custom_filter_5
,Person.birth_date 
,Person.effective_begin_date as Employment_Status_Begin_Date
,Person.employee_id


FROM
db_person_attributes Person

            LEFT OUTER JOIN Pension_Payments_SQL
            ON Pension_Payments_SQL.Person_Internal_ID = Person.platform_person_internal_id
			and Pension_Payments_SQL.platform_id = Person.platform_id
			LEFT OUTER JOIN db_plan_dim
			ON db_plan_dim.plan_id=Pension_Payments_SQL.plan_id
WHERE 
    NOT ( db_plan_dim.plan_ldsc_tx IS NULL ) AND
    NOT ( Pension_Payments_SQL.Indicator IS NULL ) 
GROUP BY 
    
Person.client_id_string , 
    Person.platform_person_internal_id, 
    Person.client_id,
    person.platform_id,
    Person.LAST_NM , 
	Person.MID_NM ,
    Person.FRST_NM , 
    --Pension_Payments_SQL.Pension_Plan, 
    Pension_Payments_SQL.Payment_Type_Description, 
    Pension_Payments_SQL.Payment_Description, 
    Pension_Payments_SQL.Indicator, 
    Pension_Payments_SQL.Service_Period_End_Date, 
    Pension_Payments_SQL.Benefit_Commencement_Date, 
    Pension_Payments_SQL.First_Payment_Date, 
    Pension_Payments_SQL.Payment_Status_Description, 
    Person.person_reason_code , 
    Pension_Payments_SQL.Payment_End_Date, 
	Pension_Payments_SQL.Election_Description,
	Optional_Form ,
	Optional_Form_Description ,
	Payment_Element,
	Delivery_Address,
	Delivery_Type_Description,
Change_Date,

End_Date ,

After_Tax_Change_Date,

After_Tax_End_Date,

--payment_destination,

 --   DB_PRSN_DBPMTDLVR0.ADDR_LDSC_TX AS Delivery_Address, 
 --   Delivery_Type_Description.LDSC_TX AS Delivery_Type_Description,
Person.salary,
Person.SALARY_RANGE,
Person.hourly_salary_status,
Person.fulltime_parttime_status
,Person.employment_status
,Person.union_name
,Person.gender
,Person.age
,Person.AGE_RANGE
,Person.tenure
,Person.TENURE_RANGE
,Person.row_level_security_filter_value
,Person.custom_filter_1
,Person.custom_filter_2
,Person.custom_filter_3
,Person.custom_filter_4
,Person.custom_filter_5
,Person.birth_date 
,Person.effective_begin_date 
,Person.employee_id
,db_plan_dim.plan_ldsc_tx)

Select * From main